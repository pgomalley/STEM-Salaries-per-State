#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Nov 25 14:38:46 2022@author: Patrick OMalley and William Ciannella"""import pandas as pdimport numpy as npimport matplotlib.pyplot as pltdfvis = pd.read_csv("/Users/patrickomalley/Downloads/CompThinkingProject/Levels_Fyi_Salary_Data.csv") #Reading in datadef salaryStats():    '''Summary Statistics'''        salary_df = dfvis["totalyearlycompensation"] #Reading in only 'Salary_In_USD'    print('\n')    s_mean = np.mean(salary_df) #Mean    print("The mean of all salaries is: ", "${:,.2f}".format(s_mean))    s_median = np.median(salary_df) #Median    print("The median of all salaries is: ", "${:,.2f}".format(s_median))    s_standev = np.std(salary_df) #Standard Deviation    print("The standard deviation of all salaries is: ", "{:,.3f}".format(s_standev))    s_var = np.var(salary_df) #Variance     print("The variance of all salaries is: ", s_var)        '''Percentiles and Distribution'''    print('\n')    s_25 = np.percentile(salary_df, 25) #25th percentile    print("The 25th percentile of all earners can expect a salary of : ", "${:,.2f}".format(s_25))    s_50 = np.percentile(salary_df, 50) #50th percentile    print("The 50th percentile of all earners can expect a salary of : ", "${:,.2f}".format(s_50))    s_75 = np.percentile(salary_df, 75) # 75th percentile    print("The 75th percentile of all earners can expect a salary of : ", "${:,.2f}".format(s_75))    s_90 = np.percentile(salary_df, 90) #90th percentile    print("The 90th percentile of all earners can expect a salary of : ", "${:,.2f}".format(s_90))    s_99 = np.percentile(salary_df, 99) # 99th percentile for top earners     print("The top 99th percentile of all earners can expect a salary of : ", "${:,.2f}".format(s_99))        plt.figure(figsize=(10, 5))    plt.hist(salary_df, bins=np.logspace(np.log10(1e3), np.log10(1e6), 40), edgecolor='black', color="mediumslateblue")    plt.gca().set_xscale("log")    plt.xlabel("Salary in USD (Log Scale)")    plt.ylabel("Number of Jobs Held")    plt.title('Distribution of Jobs by Salary')    plt.xticks([1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000],           ['1k', '2k', '5k', '10k', '20k', '50k', '100k', '200k', '500k', '1M'], rotation=45)    plt.savefig("SS.png")     plt.show()def companyLocation():    # Extract state abbreviations from the 'location' column    dfvis['state'] = dfvis['location'].str.extract(r'\b([A-Z]{2})\b')    # Filter the DataFrame to include only US locations    us_states = ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DC", "DE", "FL", "GA",                 "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",                 "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",                 "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",                 "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]    df_us = dfvis[dfvis["state"].isin(us_states)]    # Get the top 5 and bottom 5 states based on counts    state_counts = df_us["state"].value_counts()    top_5_states = state_counts.head(5)    bottom_5_states = state_counts.tail(5)    print()    print("Top 5 States with the highest number of reported salaries:")    print(top_5_states.to_string())    print("\nBottom 5 States with the lowest number of reported salaries:")    print(bottom_5_states.to_string())    # Plot the top 5 states    fig1, ax1 = plt.subplots()    ax1.pie(top_5_states, labels=top_5_states.index, autopct='%1.2f%%', startangle=90)    ax1.axis('equal')    ax1.set_title('Top 5 States')    plt.show()    fig1.savefig('Top_5_States.png')    # Plot the bottom 5 states    fig2, ax2 = plt.subplots()    ax2.pie(bottom_5_states, labels=bottom_5_states.index, autopct='%1.2f%%', startangle=90)    ax2.axis('equal')    ax2.set_title('Bottom 5 States')    plt.show()    fig2.savefig('Bottom_5_States.png')def salaryBarCharts():    # Calculate average salary for each year of experience    experience_salary = dfvis.groupby(pd.cut(dfvis['yearsofexperience'], np.arange(0, 41, 5)))['totalyearlycompensation'].mean()    # Calculate average salary for each 5-year range of years at the company    company_years_salary = dfvis.groupby(pd.cut(dfvis['yearsatcompany'], np.arange(0, 41, 5)))['totalyearlycompensation'].mean()    # Create a bar chart for salary based on years of experience    fig1, ax1 = plt.subplots()    ax1.bar(experience_salary.index.astype(str), experience_salary.values)    ax1.set_xlabel('Years of Experience')    ax1.set_ylabel('Average Salary')    ax1.set_title('Average Salary by Years of Experience')    plt.xticks(rotation=45)    plt.show()    fig1.savefig('Salary_Experience_Bar_Chart.png')    # Create a bar chart for salary based on years at the company    fig2, ax2 = plt.subplots()    ax2.bar(company_years_salary.index.astype(str), company_years_salary.values)    ax2.set_xlabel('Years at Company')    ax2.set_ylabel('Average Salary')    ax2.set_title('Average Salary by Years at Company')    plt.xticks(rotation=45)    plt.show()    fig2.savefig('Salary_CompanyYears_Bar_Chart.png')        print("Average Salary by Years of Experience:")    print(experience_salary.to_string())    print("\nAverage Salary by Years at Company:")    print(company_years_salary.to_string())    def raceSalaryPieChart():    race_columns = ["Race_Asian", "Race_White", "Race_Two_Or_More", "Race_Black", "Race_Hispanic"]    race_labels = ['Asian', 'White', 'Two or More', 'Black', 'Hispanic']    race_counts = [dfvis[col].sum() for col in race_columns]    race_mean_salaries = [dfvis.loc[dfvis[col] == 1, 'totalyearlycompensation'].mean() for col in race_columns]    # Pie chart for race distribution    sizes = race_counts    colors = ['violet', 'coral', 'cyan', 'yellowgreen', 'lightskyblue']    fig1, ax1 = plt.subplots()    ax1.pie(sizes, labels=race_labels, colors=colors, autopct='%1.2f%%', startangle=90)    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.        ax1.set_title('Race Distribution')    plt.show()    fig1.savefig('Race_Distribution.png')    print()    print("Mean Salary for each Race:")    for race, mean_salary in zip(race_labels, race_mean_salaries):        print(f"{race}: ${mean_salary:,.2f}") dfml = pd.read_csv('Levels_Fyi_Salary_Data.csv')